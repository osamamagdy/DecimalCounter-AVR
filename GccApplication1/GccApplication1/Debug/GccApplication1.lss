
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000606  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000576  00000000  00000000  000007ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000212  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000305  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  00001261  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
	const unsigned char LUT [] = {0b00111111 , 0b00000110 , 0b01011011 ,0b01001111 , 0b01100110 , 0b01101101  ,  0b01111101 ,  0b00000111 , 0b01111111 ,  0b01101111  };
	
	DDRC = 0x00;
  6c:	14 ba       	out	0x14, r1	; 20
	DDRA = 0xFF;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  72:	87 bb       	out	0x17, r24	; 23
	char x = 0 ;
	
	PORTB = 0x00;
  74:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x00;
  76:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x01;
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	85 bb       	out	0x15, r24	; 21
	const unsigned char LUT [] = {0b00111111 , 0b00000110 , 0b01011011 ,0b01001111 , 0b01100110 , 0b01101101  ,  0b01111101 ,  0b00000111 , 0b01111111 ,  0b01101111  };
	
	DDRC = 0x00;
	DDRA = 0xFF;
	DDRB = 0xFF;
	char x = 0 ;
  7c:	90 e0       	ldi	r25, 0x00	; 0
		}
		//PORTA = LUT[x%10];
		//PORTB = LUT[x/10];
		//display(x%10 , 'A');
		//display(x/10 , 'B');
		PORTA = (PORTA & 0x00) | (x/10);
  7e:	4d ec       	ldi	r20, 0xCD	; 205
  80:	01 c0       	rjmp	.+2      	; 0x84 <main+0x18>
    /* Replace with your application code */
    while (1) 
    {
		if (x==100)
		{
			x=0;
  82:	90 e0       	ldi	r25, 0x00	; 0
		}
		//PORTA = LUT[x%10];
		//PORTB = LUT[x/10];
		//display(x%10 , 'A');
		//display(x/10 , 'B');
		PORTA = (PORTA & 0x00) | (x/10);
  84:	8b b3       	in	r24, 0x1b	; 27
  86:	94 9f       	mul	r25, r20
  88:	81 2d       	mov	r24, r1
  8a:	11 24       	eor	r1, r1
  8c:	86 95       	lsr	r24
  8e:	86 95       	lsr	r24
  90:	86 95       	lsr	r24
  92:	8b bb       	out	0x1b, r24	; 27
		PORTA = (PORTA<<4) | (x%10);
  94:	2b b3       	in	r18, 0x1b	; 27
  96:	50 e1       	ldi	r21, 0x10	; 16
  98:	25 9f       	mul	r18, r21
  9a:	90 01       	movw	r18, r0
  9c:	11 24       	eor	r1, r1
  9e:	88 0f       	add	r24, r24
  a0:	38 2f       	mov	r19, r24
  a2:	33 0f       	add	r19, r19
  a4:	33 0f       	add	r19, r19
  a6:	83 0f       	add	r24, r19
  a8:	59 2f       	mov	r21, r25
  aa:	58 1b       	sub	r21, r24
  ac:	25 2b       	or	r18, r21
  ae:	2b bb       	out	0x1b, r18	; 27
		
		while(PINC == 0x00);
  b0:	83 b3       	in	r24, 0x13	; 19
  b2:	88 23       	and	r24, r24
  b4:	e9 f3       	breq	.-6      	; 0xb0 <main+0x44>
		
		while(PINC == 0x01);
  b6:	83 b3       	in	r24, 0x13	; 19
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	e9 f3       	breq	.-6      	; 0xb6 <main+0x4a>
		x=x+1;
  bc:	9f 5f       	subi	r25, 0xFF	; 255
	
	
    /* Replace with your application code */
    while (1) 
    {
		if (x==100)
  be:	94 36       	cpi	r25, 0x64	; 100
  c0:	09 f7       	brne	.-62     	; 0x84 <main+0x18>
  c2:	df cf       	rjmp	.-66     	; 0x82 <main+0x16>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
